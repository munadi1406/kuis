---
import Answer from "@/components/quiz/Asnwer";
import Layout from "@/layouts/Layout.astro";
import GuestForm from "@/components/quiz/GuestForm";
import { supabase } from "@/lib/supabase";

// import { createClient } from "@supabase/supabase-js";
// const supabase = createClient(
//   import.meta.env.SUPABASE_URL,
//   import.meta.env.SUPABASE_SERVICE_KEY,
//   {
//     auth: {
//       autoRefreshToken: false,
//       persistSession: false,
//     },
//   },
// );

const { id } = Astro.params;

const {
  data: { user },error:err,
} = await supabase.auth.getUser();
let userId = user?.id || "";
console.log({ user });
console.log({ err });

const { data: quiz, error } = await supabase
  .from("quiz")
  .select("title,waktu,token,end_quiz")
  .eq("id", id)
  .single();

let status = "false";

if (error) {
  console.error("Error fetching quiz:", error);
}
const { cookies } = Astro;
// console.log({ user });
if (!user) {
  const refresh_token = cookies.get("sb-refresh-token")?.value;
  console.log({refresh_token})
  if (!refresh_token) {
    // Tidak ada refresh token, tetapkan status sebagai "guest"
    status = "guest";
  } else {
    console.log("kode meminta rt baru jalan")
    try {
      // Mencoba untuk memperbarui sesi menggunakan refresh token
      const { data, error } = await supabase.auth.refreshSession({
        refresh_token,
      });

      if (error) {
       
        console.error("Error refreshing session:", error);
        status = "guest";
      } else {
        // Sesi berhasil diperbarui
        const { session, user } = data;

        // Menyimpan sesi yang diperbarui ke cookies
        cookies.set("sb-access-token", session.access_token, { path: "/" });
        cookies.set("sb-refresh-token", session.refresh_token, { path: "/" });

        // Mengatur sesi di supabase
        const setSession = await supabase.auth.setSession({
          access_token: session.access_token,
          refresh_token: session.refresh_token,
        });

//         const {
//   data:ooke,
// } = await supabase.auth.getUser();

// console.log({ooke})
      
        userId = user.id;
        status = "true";
        // return Astro.redirect(`/take/${id}`)
      }
    } catch (err) {
      // Menangani kesalahan lain yang mungkin terjadi
      console.error("Unexpected error:", err);
      status = "guest";
    }
  }
} else {
  if (quiz) {
    const today = new Date();
    const endQuizDate = new Date(quiz.end_quiz);

    if (today <= endQuizDate) {
      status = "true";
    }
  }
}
// console.log(quiz)

// jika tidak ada maka langsung saja
---

<Layout title={quiz?.title || ""}>
  <h3 class="text-xl w-full bg-blue-600 text-white p-2 font-semibold">
    {quiz?.title || ""}
  </h3>
  {
    status === "true" && (
      <Answer client:only="react" id={id} time={quiz?.waktu} id_user={userId} />
    )
  }
  {status === "false" && <div>Kuis tidak tersedia</div>}
  {status === "guest" && <GuestForm client:only="react" id={id} />}
</Layout>
